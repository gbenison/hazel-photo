#!/bin/sh
#-*- scheme -*-
#
#    Copyright (C) 2012 Greg Benison
#   
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#  

export GUILE_LOAD_PATH=$GUILE_LOAD_PATH:`pwd`;
export LTDL_LIBRARY_PATH=$LTDL_LIBRARY_PATH:`pwd`;
export GUILE_WARN_DEPRECATED=no;
exec guile --listen -s $0 $@ 2>>guile-error.log

!#

(use-modules (srfi srfi-1)
	     (sxml simple)
	     (ice-9 regex)
	     (ice-9 pretty-print)
	     (ice-9 receive)
	     (ice-9 ftw)
	     (web request)
	     (web uri)
	     (web server))

(define image-server-base-url
  (or (getenv "HAZEL_MEDIA_URL") "http://localhost:8081/"))
(define socket-file-name
  (or (getenv "HAZEL_SOCK_PATH") "/tmp/test.sock"))
(define media-dir
  (or (getenv "HAZEL_MEDIA_DIR") "media"))
(define image-dir      (string-append media-dir "/images"))
(define derivative-cmd "/usr/bin/convert")
;; The number of thumbnails to display on a folder page
(define nav-n-thumbnails 12)

(define image-suffixes '("jpg" "JPEG" "JPG" "png" "PNG" "tif" "tiff" "TIFF"))
(define standard-derivative-extension "jpg")

(define (mkdir-p path)
  (fold
   (lambda (next prev)
     (let ((this-dir (string-append prev next "/")))
       (if (not (and (file-exists? this-dir)
		     (file-is-directory? this-dir)))
	   (mkdir this-dir))
       this-dir))
   ""
   (string-split path #\/)))

(define (maybe-prepend elem lst)
  (cond ((null? lst)             (list elem))
	((equal? (car lst) elem) lst)
	(else (cons elem lst))))

(define (true . args) #t)

(define (is-image-file? fname)
  (and (file-exists? fname)
       (not (file-is-directory? fname))
       (any
	(lambda (suffix)
	  (string-match (string-append "." suffix) fname))
	image-suffixes)))

(define (is-image-folder? dirname)
  (and (file-is-directory? dirname)
       (any is-image-file?
	    (map (prepend-path (list dirname))(all-files dirname)))))

(define (replace-extension fname new-ext)
  (let ((my-match (string-match "[.][^./]*$" fname)))
    (string-append
     (if my-match (match:prefix my-match) fname)
     "." new-ext)))

(define (string-match-with? target)
  (lambda (str) (equal? str target)))

(define (take/max elems n)
  (cond ((null? elems) '())
	((< n 1)
	 '())
	(else (cons (car elems)
		    (take/max (cdr elems) (- n 1))))))

(define (drop/max elems n)
  (cond ((null? elems) '())
	((= n 0) elems)
	(else (drop/max (cdr elems) (- n 1)))))

;; Returns three values:
;; 1) The longest prefix of 'elems' for none of which (pred elem) is true,
;;    in reverse order;
;; 2) The first element for which (pred elem) is true;
;; 3) The remaining elements.
(define (pick-around pred elems)
  (let go ((init '())
	   (rest elems))
    (cond ((null? rest)
	   (values init #f '()))
	  ((pred (car rest))
	   (values init (car rest) (cdr rest)))
	  (else (go (cons (car rest) init)
		    (cdr rest))))))

;; Like 'pick-around', but defaults to the first list member if none match.
(define (pick-around/default pred elems)
  (receive (init elem tail)
      (pick-around pred elems)
    (if elem (values init elem tail)
	(values '()
		(car elems)
		(cdr elems)))))

;; Take at most 'n' items, evenly spreading the load
;; between list1 and list2.  Return four values:
;; 1) a prefix of list1;
;; 2) a prefix of list2 (such that length(#1) + length(#2) <= n;
;; 3) the remaining elements of list1;
;; 4) the remaining elements of list2.
(define (take-evenly list1 list2 n)
  (cond ((equal? n 0)
	 (values '() '() list1 list2))
	((and (null? list1) (null? list2))
	 (values '() '() list1 list2))
	((null? list1)
	 (values '() (take/max list2 n) '() (drop/max list2 n)))
	((null? list2)
	 (values (take/max list1 n) '() (drop/max list1 n) '()))
	(else
	 (receive (init1 init2 tail1 tail2)
	     (take-evenly (cdr list1) (cdr list2) (- n 2))
	   (values (cons (car list1) init1)
		   (cons (car list2) init2)
		   tail1
		   tail2)))))

(define (derivative-uri type)
  (lambda (folder-path image-fname)
    (string-append
     image-server-base-url
     (path->uri `(,type
		  ,@folder-path
		  ,(replace-extension image-fname
				      standard-derivative-extension))))))

(define (ensure-derivative-image dest-dir convert-args)
  (let ((->uri (derivative-uri dest-dir)))
    (lambda (folder-path image-fname)
      (let ((image-full-path     (string-join
				  `(,image-dir ,@folder-path ,image-fname) "/"))
	    (derivative-full-path (string-join `(,media-dir
						 ,dest-dir
						 ,@folder-path
						 ,(replace-extension
						   image-fname
						   standard-derivative-extension))
					       "/")))
	;; FIXME vulnerable to a regular file existing with this name.
	(if (not (and (file-exists? (dirname derivative-full-path))
		      (file-is-directory? (dirname derivative-full-path))))
	    (mkdir-p (dirname derivative-full-path)))
	(if (not (file-exists? derivative-full-path))
	    (apply system*
		   (append (cons derivative-cmd
				 convert-args)
			   (list image-full-path
				 derivative-full-path))))
	(->uri folder-path image-fname)))))

(define ensure-thumbnail
  (ensure-derivative-image "thumbnails" '("-resize" "80x80")))
(define ensure-feature
  (ensure-derivative-image "feature" '("-resize" "600x520>")))

(define (make-thumbnail folder-path image-name)
  `(img (@ (src ,(ensure-thumbnail folder-path image-name)))))

(define (all-files dirname)
  (let ((handle (opendir dirname)))
    (let loop ((result '()))
      (let ((next (readdir handle)))
	(cond ((eof-object? next) result)
	      ((string-match "^[.]" next)
	       (loop result))
	      (else (loop (cons next result))))))))

(define (prepend-path path)
  (lambda (fname)
    (string-join (append path (list fname)) "/")))

(define (all-folders base)
  (sort
   (filter (lambda (fname)
	     (file-is-directory? (string-append base "/" fname)))
	   (all-files base))
   string<?))

(define (all-image-folders)
  (define (is-image-folder-name? fname)
    (let ((full-path (string-append image-dir "/" fname)))
      (and (file-exists?       full-path)
	   (file-is-directory? full-path)
	   (is-image-folder?   full-path))))
  (sort
   (filter is-image-folder-name? (all-files image-dir))
   string<?))

(define (all-images-or-directories base)
  (sort
   (filter (lambda (fname)
	     (let ((full-path (string-append base "/" fname)))
	       (or (is-image-file?     full-path)
		   (file-is-directory? full-path))))
	   (all-files base))
   string<?))

(define (lookup-image-folder uri-path)
  (let ((fname (uri-path->path (list image-dir (car uri-path)))))
    (and (file-exists? fname)
	 (file-is-directory? fname)
	 fname)))

(define (sxml->text sxml)
  (with-output-to-string
    (lambda () (sxml->xml sxml))))

;; Returns a path (list of fnames) to an image file.
;;
;; If the supplied uri is shorter than a path to an image, it is extended by
;; appending the first member of each folder.
;;
;; "default actual path"        (a b c d) let 'd' be a regular file
;; "alternative actual path"    (a' b c d")
;;
;; ()         ->      (a b c d)
;; (a')       ->      (a' b c d)
;; (a b c d') ->      (a b c d')
;;
(define (normalize-path uri)
  (normalize-path* image-dir uri '()))

(define (normalize-path* base guide accepted)
  (let ((path (string-append base "/" (string-join accepted "/"))))
    (cond ((is-image-file? path) accepted)
	  ((not (and (file-exists? path)
		     (file-is-directory? path)))
	   #f)
	  ((null? guide)
	   (let ((next-steps (all-images-or-directories path)))
	     (and (not (null? next-steps))
		  (normalize-path* base (take next-steps 1) accepted))))
	  (else (normalize-path* base
				 (cdr guide)
				 (append accepted (list (car guide))))))))

(define (path->selection-tree base path)
  (let go ((path path)
	   (suffix "/"))
    (if (< (length path) 2)
	'() ;; List of length 1 is just the image name
	;; FIXME sort
	`(ul
	  ,@(map
	     (lambda (dir)
	       `(li ,@(if (equal? (car path) dir)
			  '((@ (class "selected")))
			  '())
		    (a (@ (href ,(string-append suffix dir)))
		       ,dir)
		    ,@(if (equal? (car path) dir)
			  (list (go (cdr path)
				    (string-append suffix (car path) "/")))
			  '())))
	     (all-folders (string-append base suffix)))))))

(define (standard-page uri-path)
  (let ((path (or (normalize-path uri-path)
		  (normalize-path '()))))
    (as-html-reply
     (with-standard-header
      `(body
	(div (@ (id "selection-tree"))
	     ,(path->selection-tree image-dir path))
	(div (@ (id "thumbnails"))
	     ,(make-thumbnail-gallery path))
	(div (@ (id "featured"))
	     ,(make-featured-image path))
	(div (@ (id "slideshow-link"))
	     (a (@ (href ,(slideshow-link uri-path)))
		"slideshow")))))))

(define (slideshow-link uri-path)
  (path->uri `("" "slideshow" ,@uri-path)))

(define (slideshow-page uri-path)
  (let ((path (normalize-path uri-path)))
    (as-html-reply
     (with-standard-header
      `(body
	(div (@ (id "selection-tree"))
	     ,(path->selection-tree image-dir path))
	(div (@ (id "slideshow"))
	     ,(slideshow path)))))))

(define (slideshow path)
  (with-image-list
   (lambda (prev-images next-images folder-name selected-image)
     `(,@(map
	  (lambda (image)
	    `(div ,(img-element-for (drop-right path 1) image)))
	  prev-images)
       (div ,(img-element-for (drop-right path 1) selected-image))
       ,@(map
	  (lambda (image)
	    `(div ,(img-element-for (drop-right path 1) image)))
	  next-images)))
   path))

(define (make-featured-image path)
  (with-image-list
   (lambda (prev-images next-images folder-name selected-image)
     `(span
       ,@(if (null? prev-images)
	    '()
	    `((a (@ (href ,(path->uri `("" ,@(drop-right path 1) ,(car prev-images)))))
		 "<")))
       ,(img-element-for (drop-right path 1) selected-image)
       ,@(if (null? next-images)
	     '()
	     `((a (@ (href ,(path->uri `("" ,@(drop-right path 1) ,(car next-images)))))
		  ">")))))
   path))

;; Given a path (dir1 dir2 ... fname),
;; Call (op prev next folder-name selected)
(define (with-image-list op path)
  (let ((folder-name (string-join (drop-right path 1) "/"))
	(selected-image-name (last path)))
    (receive (prev-images
	      selected-image
	      next-images)
	(pick-around/default (string-match-with? selected-image-name)
			     (all-image-names folder-name))
      (op prev-images next-images folder-name selected-image))))

;; FIXME directory separators in paths are ending up percent-encoded.
;; 'path' is assumed to be a relative path to an image file,
;; with the image file name as the final member.
(define (make-thumbnail-gallery path)
  (with-image-list
   (lambda (prev-images-all next-images-all folder-name selected-image)
     (define* (li-for image-name #:optional selected)
       `(li (a (@ (href ,(path->uri (maybe-prepend "" (append (drop-right path 1) (list image-name)))))
		  ,@(if selected
			'((class "selected"))
			'()))
	       ,(make-thumbnail (drop-right path 1) image-name))))
     (receive (prev-images
	       next-images
	       prev-images-remaining
	       next-images-remaining)
	 (take-evenly prev-images-all next-images-all nav-n-thumbnails)
       `(ul (@ (class "thumbnails gallery"))
	    ,@(map li-for (reverse prev-images))
	    ,(li-for selected-image 'selected)
	    ,@(map li-for next-images))))
   path))

(define (unknown-request)
  (as-html-reply
   (with-standard-header
    `(body (p "Can't get thar from here.")
	   (a (@ (href "/")) "HOME")))))

(define (path->fname path)
  (string-join path "/"))

(define (path->uri path)
  (string-join (map uri-encode path) "/"))

(define (uri-path->path uri-path)
  (string-join (map uri-decode uri-path) "/"))

(define (request-path-components request)
  (split-and-decode-uri-path (uri-path (request-uri request))))


(define (as-html-reply sxml)
  (values '((content-type . (text/html)))
	  (sxml->text sxml)))

(define (with-standard-header . body-elements)
  `(html
    (head (title "HazelPhoto 0.1-devel")
	  (script (@ (src "https://code.jquery.com/jquery-1.11.2.min.js")) "")
 	  (script (@ (src ,(string-append
 			    image-server-base-url
 			    "hazel.js"))) "")
 	  (link (@ (rel "stylesheet")
		   (type "text/css")
		   (href ,(string-append image-server-base-url
					 "style.css")))))
    (body
     (div (@ (id "nav"))
	  (a (@ (href "/"))
	     "HazelPhoto 0.1"))
     ,@body-elements)))

(define (char-alphanumeric? c)
  (or (char-alphabetic? c)
      (char-numeric? c)))

(define (all-image-names folder-name)
  (sort
   (map basename
	(filter
	 (lambda (fname)
	   (is-image-file? (string-append image-dir "/" folder-name "/" fname)))
	 (all-files (string-append image-dir "/" folder-name))))
   string<?))

(define (img-element-for folder-path image-name)
  `(a (@ (href ,(string-append
		 image-server-base-url
		 (path->uri `("images" ,@folder-path ,image-name)))))
      (img (@ (src ,(ensure-feature folder-path image-name))))))

(define (folder->thumbnail-ul folder-name)
  `(ul (@ (class "thumbnails gallery"))
       ,(map (lambda (image-name)
	       `(li ,(make-thumbnail folder-name image-name)))
	     (take/max (all-image-names folder-name) 6))))

(define (image-folder->li folder-name)
  `(li (@ (class "folder-link"))
       (a (@ (href ,(uri-encode (basename folder-name))))
	  (div
	   (h2 ,folder-name)
	   ,(folder->thumbnail-ul folder-name)
	   (div (@ (class "expander")))))))

;; Regenerate thumbnails and features for all images.
(define (cache-all)
; file-system-fold enter? leaf down up skip error init file-name
  (file-system-fold
   true ;; enter
   (lambda (fname stat error)
     (if (is-image-file? fname)
	 (let* ((path
		 (string-split (string-drop fname (string-length image-dir)) #\/))
		(path* (if (equal? (car path) "")
			   (cdr path)
			   path))
		(path** (drop-right path* 1))
		(image-fname (last path*)))
	   (begin
	     (ensure-thumbnail path** image-fname)
	     (ensure-feature   path** image-fname)))))
   true ;; down
   true ;; up
   true ;; skip
   true ;; error
   true ;; init
   image-dir)
  (as-html-reply
   (with-standard-header
    `(body
      (p "All done!"
	 (a (@ (href "/")) "Continue"))))))

(define (with-error-handler thunk)
  (let ((bt ""))
    (catch #t thunk
      (lambda (key proc msg msg-args . rest)
	(values '((content-type . (text/plain)))
		(let ((error-msg (apply format #f msg msg-args)))
		  (string-append
		   (format #f "~s: ~s: ~s~%" proc key error-msg)
		   "\n"
		   bt))))
      (lambda args (set! bt (with-output-to-string backtrace))))))

(define (hazel-photo-handler request request-body)
  (with-error-handler
   (lambda ()
     (let ((uri-path (request-path-components request)))
       (cond
	((equal? uri-path '("cache-all"))    (cache-all))
	((and (> (length uri-path)  0)
	      (equal? (car uri-path) "slideshow"))
	 (slideshow-page (cdr uri-path)))
	(else                                (standard-page uri-path)))))))

(define (make-unix-socket fname)
  (let ((server-socket (socket PF_UNIX SOCK_STREAM 0)))
    (if (file-exists? fname) (delete-file fname))
    (bind server-socket AF_UNIX fname)
    server-socket))

(if (getenv "HAZEL_RUN_LOCAL")
    (run-server hazel-photo-handler 'http)
    (run-server hazel-photo-handler
   		'http
   		`(#:socket ,(make-unix-socket socket-file-name))))
