#!/bin/sh
#-*- scheme -*-
#
#    Copyright (C) 2012 Greg Benison
#   
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#  

export GUILE_LOAD_PATH=$GUILE_LOAD_PATH:`pwd`;
export LTDL_LIBRARY_PATH=$LTDL_LIBRARY_PATH:`pwd`;
export GUILE_WARN_DEPRECATED=no;
exec guile --listen -s $0 $@ 2>>guile-error.log

!#

(use-modules (srfi srfi-1)
	     (sxml simple)
	     (ice-9 regex)
	     (ice-9 pretty-print)
	     (web request)
	     (web uri)
	     (web server))

(define image-dir "media/images")
(define image-server-base-url "http://localhost:8081/")
(define thumbnail-dir "media/thumbnails")
(define thumbnail-cmd "/usr/bin/convert")
(define thumbnail-args '("-resize" "80x80"))

(define image-suffixes '("jpg" "JPEG" "JPG" "png" "PNG" "tif" "tiff" "TIFF"))
(define standard-thumbnail-extension "jpg")

(define (image-file? fname)
  (any
   (lambda (suffix)
     (string-match (string-append "." suffix) fname))
   image-suffixes))

(define (replace-extension fname new-ext)
  (let ((my-match (string-match "[.][^./]*$" fname)))
    (string-append
     (if my-match (match:prefix my-match) fname)
     "." new-ext)))

(define (thumbnail-uri folder image-fname)
  (string-append
   image-server-base-url
   (path->uri (list "thumbnails"
		    (basename folder)
		    (replace-extension image-fname
				       standard-thumbnail-extension)))))

(define (ensure-thumbnail folder image-fname)
  (let ((image-full-path     (string-join
			      `(,image-dir ,folder ,image-fname) "/"))
	(thumbnail-full-path (string-join `(,thumbnail-dir
					    ,folder
					    ,(replace-extension
					      image-fname
					      standard-thumbnail-extension))
					  "/")))
    ;; FIXME vulnerable to a regular file existing with this name.
    (if (not (and (file-exists? (dirname thumbnail-full-path))
		  (file-is-directory? (dirname thumbnail-full-path))))
	(mkdir (dirname thumbnail-full-path)))
    (if (not (file-exists? thumbnail-full-path))
	(apply system*
	       (append (cons thumbnail-cmd
			     thumbnail-args)
		       (list image-full-path
			     thumbnail-full-path))))))

(define (make-thumbnail folder-name image-name)
  (ensure-thumbnail folder-name image-name)
  `(img (@ (src ,(thumbnail-uri folder-name image-name)))))

(define (all-files dirname)
  (let ((handle (opendir dirname)))
    (let loop ((result '()))
      (let ((next (readdir handle)))
	(if (eof-object? next)
	    result
	    (loop (cons next result)))))))

(define (is-image-folder? dirname)
  (any image-file?
       (map (prepend-path (list dirname))(all-files dirname))))

(define (prepend-path path)
  (lambda (fname)
    (string-join (append path (list fname)) "/")))

(define (all-image-folders)
  (define (is-image-folder-name? fname)
    (let ((full-path (string-append image-dir "/" fname)))
      (and (file-exists?       full-path)
	   (file-is-directory? full-path)
	   (is-image-folder?   full-path))))
  (filter is-image-folder-name? (all-files image-dir)))

(define (lookup-image-folder uri-path)
  (let ((fname (uri-path->path (list image-dir (car uri-path)))))
    (and (file-exists? fname)
	 (file-is-directory? fname)
	 fname)))

(define (sxml->text sxml)
  (with-output-to-string
    (lambda () (sxml->xml sxml))))

(define (folder-not-found-page path)
  (as-html-reply
   (with-standard-header
    `(body (p "Folder " ,path " does not exist.  Try one of these:")
	   (ul ,(map image-folder->li (all-image-folders)))))))

(define (folder-page uri-path)
  (let* ((folder-name (uri-decode (first uri-path)))
	 (selected-image-name  (and (> (length uri-path) 1)
				    (uri-decode (second uri-path))))
	 (folder-path (string-append image-dir "/" folder-name)))

    (if (not (and (file-exists? folder-path)
		  (file-is-directory? folder-path)))
	(folder-not-found-page uri-path)
	(as-html-reply
	 (with-standard-header
	  `(body
	    (h2 ,(car uri-path))
	    (ul
	     ,(map (lambda (image-name)
		     `(li (a (@ (href ,(path->uri (list "" folder-name image-name)))
				(class ,(if (equal? image-name selected-image-name)
					    "selected"
					    "")))
			     ,(make-thumbnail folder-name image-name))))
		   (all-image-names folder-name)))
	    (div (@ (class "featured"))
		 ,(if (string? selected-image-name)
		      (img-element-for folder-name selected-image-name)
		      '(span "Select an image")))))))))

(define (unknown-request)
  (as-html-reply
   (with-standard-header
    `(body (p "Can't get thar from here.")
	   (a (@ (href "/")) "HOME")))))

(define (path->fname path)
  (string-join path "/"))

(define (path->uri path)
  (string-join (map uri-encode path) "/"))

(define (uri-path->path uri-path)
  (string-join (map uri-decode uri-path) "/"))

(define (request-path-components request)
  (split-and-decode-uri-path (uri-path (request-uri request))))


(define (as-html-reply sxml)
  (values '((content-type . (text/html)))
	  (sxml->text sxml)))

(define (with-standard-header body)
  `(html
    (head (title "HazelPhoto 0.1")
	  (link (@ (rel "stylesheet")
		   (type "text/css")
		   (href ,(string-append image-server-base-url
					 "style.css")))))
    ,body))

(define (char-alphanumeric? c)
  (or (char-alphabetic? c)
      (char-numeric? c)))

(define (all-image-names folder-name)
  (map basename
       (filter image-file?
	       (all-files (string-append image-dir "/" folder-name)))))

(define (image-uri folder-name image-name)
  (string-append
   image-server-base-url
   (path->uri (list "images"
		    (basename folder-name)
		    (basename image-name)))))

(define (img-element-for folder-name image-name)
  `(img (@ (src ,(image-uri folder-name image-name)))))

(define (folder->thumbnail-ul folder-name)
  `(ul
    ,(map (lambda (image-name)
	    `(li ,(make-thumbnail folder-name image-name)))
	  (all-image-names folder-name))))

(define (image-folder->li folder-name)
  `(li
    (a (@ (href ,(uri-encode (basename folder-name)))) ,folder-name)
    ,(folder->thumbnail-ul folder-name)))

(define (landing-page)
  (as-html-reply
   (with-standard-header
    `(body
      (ul
       ,(map image-folder->li (all-image-folders)))))))

(define (with-error-handler thunk)
  (catch #t thunk
    (lambda args
      (values '((content-type . (text/plain)))
	      (with-output-to-string
		(lambda () (pretty-print args)))))))

(define (hazel-photo-handler request request-body)
  (with-error-handler
   (lambda ()
     (let ((uri-path (request-path-components request)))
       (cond
	((null? uri-path)             (landing-page))
	((>= (length uri-path) 1)     (folder-page uri-path))
	(else                         (unknown-request)))))))

(run-server hazel-photo-handler 'http)